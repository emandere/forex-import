# Docker

# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  x86ImageName: 'emandere/forex-import-x86'
  armImageName: 'emandere/forex-import-arm'
  DeploymentPath: '/home/emandere/deployments/forex-import/$(Release.ReleaseName)'
  GitHubDeploymentPath: 'https://raw.githubusercontent.com/emandere/forex-import/master/deployment.yaml'
  DeploymentConfigPath: '/home/emandere/deployments/forex-import/$(Release.ReleaseName)/deployment.yaml'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an x86 image
      inputs:
        command: buildAndPush
        repository: $(x86ImageName)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'dockerhub'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build an ARM image
      inputs:
        command: buildAndPush
        repository: $(armImageName)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile.arm'
        containerRegistry: 'dockerhub'
        tags: |
          $(tag)
          
- stage: Deploy
  jobs:
    # track deployments on the environment
  - deployment: WSL_Linux
    pool:
      name: LocalLinux
    # creates an environment if it doesnâ€™t exist
    environment: 'forex-import'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - bash: |
               # Write your commands here
               
               sudo mkdir -p $(DeploymentPath)
               
               sudo rm -f $(DeploymentPath)/*
               
               sudo chmod 775 $(DeploymentPath)
               
               sudo wget -q $(GitHubDeploymentPath) -P  $(DeploymentPath)
               
               sudo sed -i 's/{platform}/x86/'  $(DeploymentConfigPath)
               
               sudo sed -i 's/{buildId}/$(Build.BuildId)/'  $(DeploymentConfigPath)
               
               
              displayName: 'Set up artifacts'
            